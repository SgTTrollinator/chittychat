// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.0
// source: service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClientServiceClient is the client API for ChatClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClientServiceClient interface {
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	AddClient(ctx context.Context, in *AddMessage, opts ...grpc.CallOption) (*Acknowledgment, error)
}

type chatClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClientServiceClient(cc grpc.ClientConnInterface) ChatClientServiceClient {
	return &chatClientServiceClient{cc}
}

func (c *chatClientServiceClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/service.ChatClientService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClientServiceClient) AddClient(ctx context.Context, in *AddMessage, opts ...grpc.CallOption) (*Acknowledgment, error) {
	out := new(Acknowledgment)
	err := c.cc.Invoke(ctx, "/service.ChatClientService/AddClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatClientServiceServer is the server API for ChatClientService service.
// All implementations must embed UnimplementedChatClientServiceServer
// for forward compatibility
type ChatClientServiceServer interface {
	Publish(context.Context, *Message) (*Message, error)
	AddClient(context.Context, *AddMessage) (*Acknowledgment, error)
	mustEmbedUnimplementedChatClientServiceServer()
}

// UnimplementedChatClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatClientServiceServer struct {
}

func (UnimplementedChatClientServiceServer) Publish(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChatClientServiceServer) AddClient(context.Context, *AddMessage) (*Acknowledgment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedChatClientServiceServer) mustEmbedUnimplementedChatClientServiceServer() {}

// UnsafeChatClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatClientServiceServer will
// result in compilation errors.
type UnsafeChatClientServiceServer interface {
	mustEmbedUnimplementedChatClientServiceServer()
}

func RegisterChatClientServiceServer(s grpc.ServiceRegistrar, srv ChatClientServiceServer) {
	s.RegisterService(&ChatClientService_ServiceDesc, srv)
}

func _ChatClientService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChatClientService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServiceServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatClientService_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServiceServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChatClientService/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServiceServer).AddClient(ctx, req.(*AddMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatClientService_ServiceDesc is the grpc.ServiceDesc for ChatClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ChatClientService",
	HandlerType: (*ChatClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ChatClientService_Publish_Handler,
		},
		{
			MethodName: "AddClient",
			Handler:    _ChatClientService_AddClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}

// BroadcastServiceClient is the client API for BroadcastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastServiceClient interface {
	Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
}

type broadcastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastServiceClient(cc grpc.ClientConnInterface) BroadcastServiceClient {
	return &broadcastServiceClient{cc}
}

func (c *broadcastServiceClient) Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/service.BroadcastService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServiceServer is the server API for BroadcastService service.
// All implementations must embed UnimplementedBroadcastServiceServer
// for forward compatibility
type BroadcastServiceServer interface {
	Broadcast(context.Context, *Message) (*Empty, error)
	mustEmbedUnimplementedBroadcastServiceServer()
}

// UnimplementedBroadcastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServiceServer struct {
}

func (UnimplementedBroadcastServiceServer) Broadcast(context.Context, *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedBroadcastServiceServer) mustEmbedUnimplementedBroadcastServiceServer() {}

// UnsafeBroadcastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServiceServer will
// result in compilation errors.
type UnsafeBroadcastServiceServer interface {
	mustEmbedUnimplementedBroadcastServiceServer()
}

func RegisterBroadcastServiceServer(s grpc.ServiceRegistrar, srv BroadcastServiceServer) {
	s.RegisterService(&BroadcastService_ServiceDesc, srv)
}

func _BroadcastService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.BroadcastService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).Broadcast(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// BroadcastService_ServiceDesc is the grpc.ServiceDesc for BroadcastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BroadcastService",
	HandlerType: (*BroadcastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _BroadcastService_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
